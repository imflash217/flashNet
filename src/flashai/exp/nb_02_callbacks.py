
##########################################
###### This file was autogenerated. ######
######### DO NOT EDIT this file. #########
##########################################
### file to edit: dev_nb/imflash217__02_callbacks.ipynb ####

from exp.nb_02_minibatch_training import *

class DataBunch():
    def __init__(self, train_dl, valid_dl, c=None):
        self.train_dl = train_dl
        self.valid_dl = valid_dl
        self.c = c

    @property
    def train_ds(self):
        return self.train_dl.dataset

    @property
    def valid_ds(self):
        return self.valid_dl.dataset


def get_model(data, lr=0.5, nh=50):
    m = data.train_ds.x.shape[1]
    model = torch.nn.Sequential(torch.nn.Linear(m, nh),
                                torch.nn.ReLU(),
                                torch.nn.Linear(nh, data.c))
    return model, optim.SGD(model.parameters(), lr=lr)


class Learner():
    def __init__(self, model, opt, loss_fn, data):
        self.model   = model
        self.opt     = opt
        self.loss_fn = loss_fn
        self.data    = data


import re

_camel_re1 = re.compile('(.)([A-Z][a-z]+)')
_camel_re2 = re.compile('([a-z0-9])([A-Z])')

def camel2snake(name):
    s1 = re.sub(_camel_re1, r'\1_\2', name)
    return re.sub(_camel_re2, r'\1_\2', s1).lower()

class Callback():
    _order = 0
    def set_runner(self, run):
        self.run = run
    def __getattr__(self, key):
        return getattr(self.run, key)

    @property
    def name(self):
        name = re.sub(r'Callback$', '', self.__class__.__name__)
        return camel2snake(name or 'callback')


class TrainEvalCallback(Callback):
    """
    This callback is resposnsible to switch the model back and forth
    in training and validation mode, as well as maintaining the count
    of the total numbe rof iterations or %age of iterations elapsed in the epoch
    """

    def begin_fit(self):
        self.run.n_epochs = 0.
        self.run.n_iters  = 0

    def after_batch(self):
        if not self.in_train:
            return
        self.run.n_epochs += 1./self.iters
        self.run.n_iters  += 1

    def begin_epoch(self):
        self.run.n_epochs = self.epoch
        self.model.train()
        self.run.in_train = True

    def begin_validate(self):
        self.model.eval()
        self.run.in_train = False


from typing import *

def listify(o):
    if o is None: return []
    if isinstance(o, list): return o
    if isinstance(o, str):  return [o]
    if isinstance(o, Iterable): return list(o)
    return [o]


class Runner():
    def __init__(self, cbs=None, cb_funcs=None):
        cbs = listify(cbs)
        for cbf in listify(cb_funcs):
            cb = cbf()
            setattr(self, cb.name, cb)
            cbs.append(cb)
        self.stop = False
        self.cbs = cbs + [TrainEvalCallback()]

    @property
    def opt(self):       return self.learner.opt
    @property
    def model(self):     return self.learner.model
    @property
    def loss_func(self): return self.learner.loss_fn
    @property
    def data(self):      return self.learner.data

    def one_batch(self, xb, yb):
        self.xb = xb
        self.yb = yb
        if self("begin_batch"):
            return
        self.pred = self.model(self.xb)
        if self("after_pred"):
            return
        self.loss = self.loss_func(self.pred, self.yb)
        if self("after_loss") or not self.in_train:
            return
        self.loss.backward()
        if self("after_backward"):
            return
        self.opt.step()
        if self("after_step"):
            return
        self.opt.zero_grad()

    def all_batches(self, dl):
        self.iters = len(dl)
        for xb, yb in dl:
            if self.stop:
                break
            self.one_batch(xb, yb)
            self("after_batch")
        self.stop = False

    def fit(self, epochs, learner):
        self.epochs  = epochs
        self.learner = learner

        try:
            for cb in self.cbs:
                cb.set_runner(run=self)
            if self("begin_fit"):
                return
            for epoch in range(self.epochs):
                self.epoch = epoch

                ### Training Phase
                if not self("begin_epoch"):
                    self.all_batches(dl=self.data.train_dl)

                ### Validation Phase
                with torch.no_grad():
                    if not self("begin_validate"):
                        self.all_batches(dl=self.data.valid_dl)

                if self("after_epoch"): break

        finally:
            self("after_fit")
            self.learner = None

    def __call__(self, cb_name):
        """This is the code which also takes care of calling self(*)"""
        for cb in sorted(self.cbs, key=lambda x: x._order):
            f = getattr(cb, cb_name, None)                    ### equivalent to "cb.cb_name"; default is None
            if f and f():
                return True
        return False


class AvgStats():
    def __init__(self, metrics, in_train):
        self.metrics  = listify(metrics)
        self.in_train = in_train

    def reset(self):
        self.tot_loss = 0.
        self.count    = 0
        self.tot_mets = [0.] * len(self.metrics)

    @property
    def all_stats(self):
        return [self.tot_loss.item()] + self.tot_mets      ### keeping loss at the begining

    @property
    def avg_stats(self):
        return [o/self.count for o in self.all_stats]

    def __repr__(self):
        if not self.count:
            return ""
        return f"{'train: ' if self.in_train else 'valid: '}{self.avg_stats}"

    def accumulate(self, run):
        bn = run.xb.shape[0]
        ### print(f"bn={bn}")
        self.tot_loss += run.loss * bn
        ### print(f"run.loss, *bn = {run.loss}, {run.loss*bn}, self.tot_loss={self.tot_loss}")
        self.count    += bn
        ### print(f"bn={bn}, self.count={self.count}")
        for i, m in enumerate(self.metrics):
            self.tot_mets[i] += m(run.pred, run.yb) * bn


class AvgStatsCallback(Callback):
    def __init__(self, metrics):
        self.train_stats = AvgStats(metrics=metrics, in_train=True)
        self.valid_stats = AvgStats(metrics=metrics, in_train=False)

    def begin_epoch(self):
        self.train_stats.reset()
        self.valid_stats.reset()

    def after_loss(self):
        stats = self.train_stats if self.in_train else self.valid_stats
        with torch.no_grad():
            stats.accumulate(self.run)

    def after_epoch(self):
        print(f"epoch=[{self.epoch+1}/{self.epochs}]:\t"\
              f"{self.train_stats}\t"\
              f"{self.valid_stats}")


from functools import partial