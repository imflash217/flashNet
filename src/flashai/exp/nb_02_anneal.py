
##########################################
###### This file was autogenerated. ######
######### DO NOT EDIT this file. #########
##########################################
### file to edit: dev_nb/imflash217__02_anneal.ipynb ####

from exp.nb_02_callbacks import *

def create_learner(model_func, loss_func, data):
    return Learner(*model_func(data), loss_func, data)

def get_model_func(lr=0.5):
    return partial(get_model, lr=lr)


class Recorder(Callback):
    def begin_fit(self):
        self.lrs    = []
        self.losses = []

    def after_batch(self):
        if not self.in_train:
            return
        self.lrs.append(self.opt.param_groups[-1]["lr"])
        self.losses.append(self.loss.detach().cpu())

    def plot_lr(self):
        plt.plot(self.lrs)

    def plot_loss(self):
        plt.plot(self.losses)


class ParamScheduler(Callback):
    _order = 1
    def __init__(self, pname, sched_func):
        self.pname      = pname
        self.sched_func = sched_func

    def set_param(self):
        for pg in self.opt.param_groups:
            ### print(self.sched_func, self.n_epochs, self.epochs)
            pg[self.pname] = self.sched_func(self.n_epochs/self.epochs)

    def begin_batch(self):
        if self.in_train:
            self.set_param()


def annealer(f):
    def _inner(start, end):
        return partial(f, start, end)
    return _inner

@annealer
def sched_linear(start, end, pos):
    return start + (end-start)*pos



@annealer
def sched_cos(start, end, pos):
    return start + (end-start) * (1 + math.cos(math.pi*(1-pos))) / 2.

@annealer
def sched_no(start, end, pos):
    return start

@annealer
def sched_exp(start, end, pos):
    return start * ((end/start) ** pos)



def combine_scheds(pcts, scheds):
    """
    pcts  : list of %ages of each scheduler
    scheds: list of all schedulers
    """
    assert sum(pcts) == 1
    pcts = torch.tensor([0] + listify(pcts))
    assert torch.all(pcts >= 0)
    pcts = torch.cumsum(input=pcts, dim=0)
    def _inner(pos):
        """pos is a value b/w (0,1)"""
        idx = (pos >= pcts).nonzero().max()
        actual_pos = (pos-pcts[idx]) / (pcts[idx+1]-pcts[idx])
        return scheds[idx](pos=actual_pos)
    return _inner
