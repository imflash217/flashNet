import json
import fire
import re
import glob
from pathlib import Path

__author__ = "@imflash217"
__project__ = "flash.AI; 2019"

def is_export(cell):
    if cell["cell_type"] != "code":
        return False

    src = cell["source"]
    if len(src) == 0 or len(src[0]) < 7:
        return False

    ### import pdb
    ### pdb.set_trace()

    return re.match(r"^\s*#\s*export\s*$", src[0], re.IGNORECASE) is not None


def get_sorted_files(all_files, up_to=True):
    """ Return all the notebook files sorted by name.
        all_files:  [True]        => returns all files
                 :  ["*_*.ipynb"] => returns this pattern
        up_to    :  [None]        => No upper limit
                 :  [filter]      => returns all files upto "filter" included
        NOTE: The sorting option is important to ensure that the notebook is executed in correct order.
    """
    ret = []

    if (all_files == True):         ### checks both that is Bool type and that is True
        ret = glob.glob("*ipynb")
    if (isinstance(all_files, str)):
        ret = glob.glob(all_files)
    if len(ret) == 0:
        print("WARNING: No files found!!!")
        return ret
    if up_to is not None:
        ret = [f for f in ret if str(f) <= str(up_to)]

    return sorted(ret)


def notebook_to_script(fname=None, all_files=None, up_to=None):
    """ Find cells starting with #export and put them into new module
        all_files:  [Boolean]     => Convert all files into the folder
        upto     :  [None/filter] => Convert files upto specified one included

        ES:
        notebook_to_script --all_files=True     ### parse all files
        notebook_to_script --all_files=nb*      ### parse all files starting with nb
        notebook_to_script --up_to=10           ### parse all files with (name <= "10")
        notebook_to_script --all_files=*_*.ipynb --up_to=10     ### parse all notebook files with "_" and (name <= "10")
    """

    ### initial checks
    if (all_files is None) and (up_to is not None):
        all_files = True
    if (fname is None) and (not all_files):
        print("Should provide a file name")
    if not all_files:
        notebook_to_script_single(fname)
    else:
        print("Begin....")
        [notebook_to_script_single(f) for f in get_sorted_files(all_files=all_files, up_to=up_to)]
        print("....End!")

def notebook_to_script_single(fname):
    """ Find cells starting with #export and puts them into a new module."""
    fname = Path(fname)
    fname_out = f"nb_{fname.stem.split('__')[1]}.py"
    main_dict = json.load(open(fname, "r", encoding="utf-8"))
    code_cells = [c for c in main_dict["cells"] if is_export(c)]

    module = f"""
##########################################
###### This file was autogenerated. ######
######### DO NOT EDIT this file. #########
##########################################
### file to edit: dev_nb/{fname.name} ####

"""

    for cell in code_cells:
        ### grab everything in the code cell except "#export"
        module += "".join(cell["source"][1:]) + "\n\n"
        ### remove trailing spaces
        module = re.sub(pattern=r" +$", repl="", string=module, flags=re.MULTILINE)
        ### create the parent directory if it does not exists
        if not (fname.parent/"exp").exists():
            (fname.parent/"exp").mkdir()
        out_path = fname.parent/"exp"/fname_out
        open(out_path, "w").write(module[:-2])
        print(f"Converted {fname} to {out_path}")


if __name__ == "__main__":
    fire.Fire(notebook_to_script)


